{"version":3,"sources":["../src/tag_processor.js"],"names":["_","TagProcessor","templateSrv","tsId","tags","aliases","id","name","candidates","excludedDimensions","tsVars","metricWithDims","c","value","toLowerCase","startsWith","text","push","key","k","dimension","indexOf","join","label","alias","streamLabel","find","replace"],"mappings":";;;;;;;;;;;;;;;AACOA,a;;;;;;;;;;;;;;;;;;;;;oCAEMC,Y;AAET,sCAAYC,WAAZ,EAAyB;AAAA;;AACrB,yBAAKA,WAAL,GAAmBA,WAAnB;AACH;;;;wDAEmBC,I,EAAMC,I,EAAMC,O,EAAS;AACrC,4BAAI,CAACD,IAAL,EAAW;AACP,mCAAO,EAAEE,IAAIH,IAAN,EAAYI,MAAMJ,IAAlB,EAAP;AACH;;AAED,4BAAMK,aAAa,CAAC,WAAD,EAAc,sBAAd,CAAnB;AACA,4BAAMC,qBAAqB,CAAC,WAAD,EAAc,sBAAd,EAAsC,OAAtC,EAA+C,WAA/C,EAA4D,eAA5D,CAA3B;;AAEA,4BAAMC,SAAS,EAAf;AACA,4BAAMC,iBAAiB,EAAvB;AACA,6BAAK,IAAIC,CAAT,IAAcJ,UAAd,EAA0B;AACtB,gCAAMK,QAAQT,KAAKI,WAAWI,CAAX,CAAL,CAAd;AACA,gCAAIC,SAAS,CAACA,MAAMC,WAAN,GAAoBC,UAApB,CAA+B,MAA/B,CAAd,EAAsD;AAClDL,uCAAO,QAAP,IAAmB,EAAEM,MAAMH,KAAR,EAAeA,OAAOA,KAAtB,EAAnB;AACAF,+CAAeM,IAAf,CAAoBJ,KAApB;AACH;AACJ;;AAED,4BAAMK,MAAM,EAAZ;AACA,6BAAK,IAAIC,CAAT,IAAcf,KAAK,QAAL,CAAd,EAA8B;AAC1B,gCAAMgB,YAAYhB,KAAK,QAAL,EAAee,CAAf,CAAlB;AACA,gCAAIV,mBAAmBY,OAAnB,CAA2BD,SAA3B,MAA0C,CAAC,CAA/C,EAAkD;AAC9C,oCAAMP,SAAQT,KAAKgB,SAAL,CAAd;AACA,oCAAIP,MAAJ,EAAW;AACPK,wCAAID,IAAJ,CAASG,YAAY,GAAZ,GAAkBP,MAA3B;AACH;AACJ;AACJ;;AAEDF,uCAAeM,IAAf,CAAoBC,IAAII,IAAJ,CAAS,GAAT,CAApB;;AAEA,6BAAK,IAAIH,EAAT,IAAcf,IAAd,EAAoB;AAChB,gCAAIK,mBAAmBY,OAAnB,CAA2BF,EAA3B,MAAkC,CAAC,CAAvC,EAA0C;AACtC,oCAAMN,UAAQT,KAAKe,EAAL,CAAd;AACA,oCAAIN,OAAJ,EAAW;AACPH,2CAAOS,EAAP,IAAY,EAAEH,MAAMH,OAAR,EAAeA,OAAOA,OAAtB,EAAZ;AACH;AACJ;AACJ;;AAED,4BAAIU,QAAQ,EAAZ;AACA,4BAAIC,QAAQ,IAAZ;AACA,4BAAMC,cAAcrB,KAAK,gBAAL,CAApB;AACA,4BAAIqB,WAAJ,EAAiB;AACbf,mCAAO,OAAP,IAAkB,EAAEM,MAAMS,WAAR,EAAqBZ,OAAOY,WAA5B,EAAlB;AACAF,oCAAQE,cAAc,GAAtB;AACAD,oCAAQnB,QAAQoB,WAAR,CAAR;AACH,yBAJD,MAIO;AACHD,oCAAQxB,EAAE0B,IAAF,CAAOrB,OAAP,EAAgB;AAAA,uCAAK,IAAL;AAAA,6BAAhB,CAAR;AACH;AACD,4BAAMC,KAAKiB,QAAQZ,eAAeW,IAAf,CAAoB,GAApB,CAAnB;AACA,4BAAMf,OAAOiB,QAAQ,KAAKtB,WAAL,CAAiByB,OAAjB,CAAyBH,KAAzB,EAAgCd,MAAhC,CAAR,GAAkDJ,EAA/D;AACA,+BAAO,EAAEA,MAAF,EAAMC,UAAN,EAAP;AACH","file":"tag_processor.js","sourcesContent":["// Copyright (C) 2020 Splunk, Inc. All rights reserved.\nimport _ from \"lodash\";\n\nexport class TagProcessor {\n\n    constructor(templateSrv) {\n        this.templateSrv = templateSrv;\n    }\n\n    timeSeriesNameAndId(tsId, tags, aliases) {\n        if (!tags) {\n            return { id: tsId, name: tsId };\n        }\n\n        const candidates = ['sf_metric', 'sf_originatingMetric'];\n        const excludedDimensions = ['sf_metric', 'sf_originatingMetric', 'jobId', 'programId', 'computationId'];\n\n        const tsVars = {};\n        const metricWithDims = [];\n        for (let c in candidates) {\n            const value = tags[candidates[c]];\n            if (value && !value.toLowerCase().startsWith('_sf_')) {\n                tsVars['metric'] = { text: value, value: value };\n                metricWithDims.push(value);\n            }\n        }\n\n        const key = [];\n        for (let k in tags['sf_key']) {\n            const dimension = tags['sf_key'][k];\n            if (excludedDimensions.indexOf(dimension) === -1) {\n                const value = tags[dimension];\n                if (value) {\n                    key.push(dimension + '=' + value);\n                }\n            }\n        }\n\n        metricWithDims.push(key.join(','));\n\n        for (let k in tags) {\n            if (excludedDimensions.indexOf(k) === -1) {\n                const value = tags[k];\n                if (value) {\n                    tsVars[k] = { text: value, value: value };\n                }\n            }\n        }\n\n        let label = '';\n        let alias = null;\n        const streamLabel = tags['sf_streamLabel'];\n        if (streamLabel) {\n            tsVars['label'] = { text: streamLabel, value: streamLabel };\n            label = streamLabel + ':';\n            alias = aliases[streamLabel];\n        } else {\n            alias = _.find(aliases, a => true);\n        }\n        const id = label + metricWithDims.join('/');\n        const name = alias ? this.templateSrv.replace(alias, tsVars) : id;\n        return { id, name };\n    }\n\n}"]}