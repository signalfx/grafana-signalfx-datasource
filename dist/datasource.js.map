{"version":3,"sources":["../src/datasource.js"],"names":["_","signalfx","StreamHandler","SignalFxDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","authToken","jsonData","accessToken","headers","endpoint","replace","match","p1","p2","console","log","signalflow","window","streamer","SignalFlow","signalflowEndpoint","streams","options","queries","filter","targets","t","hide","map","program","scopedVars","join","aliases","collectAliases","Promise","resolve","data","handler","panelId","start","fromPairs","alias","flatMap","extractLabelsWithAlias","re","labels","m","exec","push","doRequest","method","then","response","status","message","title","query","metricNameQuery","getMetrics","propertyKeysQuery","getPropertyKeys","propertyValuesQuery","getPropertyValues","tagsQuery","getTags","when","doQueryRequest","mapMetricsToTextValue","result","results","text","d","value","metric","partialInput","doSuggestQueryRequest","mapPropertiesToTextValue","propertyKey","path","params","escapeQuery","limit","property","programText","packageSpecifications","request","programs","additionalFilters","additionalReplaceOnlyFilters","additionalQuery","JSON","stringify","datasourceRequest"],"mappings":"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","file":"datasource.js","sourcesContent":["// Copyright (C) 2019 SignalFx, Inc. All rights reserved.\nimport _ from \"lodash\";\nimport signalfx from './signalfx';\nimport {StreamHandler} from './stream_handler';\n\nexport class SignalFxDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.authToken = instanceSettings.jsonData.accessToken;\n    this.headers = {'Content-Type': 'application/json'};\n    this.headers['X-SF-TOKEN'] = this.authToken;\n    this.endpoint = instanceSettings.url.replace(/^(http)(s)?:/, function(match, p1, p2) {\n      return 'ws' + (p2 || '') + ':';\n    });\n    console.log('Using SignalFx at ' + this.endpoint);\n    this.signalflow = window.signalfx.streamer.SignalFlow(this.authToken, {\n      signalflowEndpoint: this.endpoint,\n    });\n    this.streams = [];\n  }\n\n  query(options) {\n    const queries = _.filter(options.targets, t => {return t.hide !== true;})\n    .map(t => this.templateSrv.replace(t.program, options.scopedVars));\n    var program = queries.join('\\n');\n\n    const aliases = this.collectAliases(options);\n\n    // TODO: Better validation can be implemented here \n    if (!program) {\n      return Promise.resolve({data: []});\n    }\n\n    var handler = this.streams[options.panelId];\n    if (!handler) {\n      handler = new StreamHandler(this.signalflow, this.templateSrv);\n      this.streams[options.panelId] = handler;\n    }\n    return handler.start(program, aliases, options);\n  }\n\n  collectAliases(options) {\n    return _.fromPairs(_.filter(options.targets, t => {return t.hide !== true && t.program && t.alias;})\n      .map(t => {return {program: this.templateSrv.replace(t.program, options.scopedVars || {}), alias: t.alias};})\n      .flatMap(t => this.extractLabelsWithAlias(t.program, t.alias)));\n  }\n\n  extractLabelsWithAlias(program, alias) {\n    const re = /label\\s?=\\s?'([\\w]*?)'/igm;\n    var labels = [];\n    var m;\n    do {\n        m = re.exec(program);\n        if (m) {\n          labels.push([m[1], alias]);\n        }\n    } while (m);\n    return labels;\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/v2/metric',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  metricFindQuery(query) {\n    var metricNameQuery = query.match(/^metrics\\(([^\\)]*?)\\)/);\n    if (metricNameQuery) {\n      return this.getMetrics(this.templateSrv.replace(metricNameQuery[1]));\n    }\n    var propertyKeysQuery = query.match(/^property_keys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n    if (propertyKeysQuery) {\n      return this.getPropertyKeys(this.templateSrv.replace(propertyKeysQuery[1]), this.templateSrv.replace(propertyKeysQuery[3]));\n    }\n    var propertyValuesQuery = query.match(/^property_values\\(([^,]+?),\\s?([^,]+?)(,\\s?(.+))?\\)/);\n    if (propertyValuesQuery) {\n      return this.getPropertyValues(this.templateSrv.replace(propertyValuesQuery[1]), this.templateSrv.replace(propertyValuesQuery[2]), this.templateSrv.replace(propertyValuesQuery[4]));\n    }\n    var tagsQuery = query.match(/^tags\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n    if (tagsQuery) {\n      return this.getTags(this.templateSrv.replace(tagsQuery[1]), this.templateSrv.replace(tagsQuery[3]));\n    }\n    // var globalTagsQuery = query.match(/^tags\\(([^\\)]*?)\\)/);\n    // if (globalTagsQuery) {\n    //   return this.getGlobalTags(this.templateSrv.replace(globalTagsQuery[1]));\n    // }\n    this.q.when([]);\n  }\n\n  getMetrics(query) {\n    return this.doQueryRequest('/v2/metric', 'name:' + (query ? query : '*'))\n      .then(this.mapMetricsToTextValue);\n  }\n\n  mapMetricsToTextValue(result) {\n    return _.map(result.data.results, d => {\n      return { text: d.name, value: d.name };\n    });\n  }\n\n  getPropertyKeys(metric, partialInput) {\n    return this.doSuggestQueryRequest(metric, null, partialInput)\n      .then(this.mapPropertiesToTextValue);\n  }\n\n  getPropertyValues(metric, propertyKey, partialInput) {\n    return this.doSuggestQueryRequest(metric, propertyKey, partialInput)\n      .then(this.mapPropertiesToTextValue);\n  }\n\n  getTags(metric, partialInput) {\n    return this.doSuggestQueryRequest(metric, 'sf_tags', partialInput)\n      .then(this.mapPropertiesToTextValue);\n  }\n\n  mapPropertiesToTextValue(result) {\n    return _.map(result.data, d => {\n      return { text: d, value: d };\n    });\n  }\n\n  // getGlobalTags(query) {\n  //   return this.doQueryRequest('/v2/tag', query)\n  //     .then(this.mapMetricsToTextValue);\n  // }\n\n  doQueryRequest(path, query) {\n    return this.doRequest({\n      url: this.url + path,\n      params: {query: this.escapeQuery(query), limit: 100},\n      method: 'GET',\n    });\n  }\n\n  doSuggestQueryRequest(metric, property, partialInput) {\n    var program = {\n      programText: 'data(\\'' + metric +'\\').publish(label=\\'A\\')',\n      packageSpecifications: ''\n    };\n    var request = {\n      programs: [program],\n      property,\n      partialInput: partialInput != null ? partialInput : '',\n      limit: 100,\n      additionalFilters: [],\n      additionalReplaceOnlyFilters:[],\n      additionalQuery: null\n    };\n    return this.doRequest({\n      url: this.url + '/v2/suggest/_signalflowsuggest',\n      data: JSON.stringify(request),\n      method: 'POST'\n    });\n  }\n\n  escapeQuery(query) {\n    return query.replace(/[\\/]/g, '\\\\$&');\n  }\n\n  doRequest(options) {\n    options.headers = this.headers;\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n}\n"]}