{"version":3,"sources":["../src/datasource.js"],"names":["_","signalfx","StreamHandler","ProxyHandler","SignalFxDatasource","instanceSettings","$q","backendSrv","templateSrv","datasourceId","id","type","url","name","q","withCredentials","authToken","jsonData","accessToken","headers","startsWith","proxyAccess","endpoint","replace","match","p1","p2","console","log","signalflow","window","streamer","SignalFlow","signalflowEndpoint","streams","interpolateQueryStr","bind","options","queries","filter","targets","t","hide","map","program","scopedVars","join","aliases","collectAliases","maxDelay","getMaxDelay","Promise","resolve","data","getSignalflowHandler","start","fromPairs","alias","flatMap","extractLabelsWithAlias","re","labels","m","exec","push","max","handler","panelId","doRequest","method","then","response","status","message","title","query","metricNameQuery","getMetrics","propertyKeysQuery","getPropertyKeys","propertyValuesQuery","getPropertyValues","tagsQuery","getTags","when","mapFunc","mapPropertiesToTextValue","mapMetricsToTextValue","doQueryRequest","result","results","text","d","value","metric","partialInput","doSuggestQueryRequest","propertyKey","path","params","escapeQuery","limit","property","programText","packageSpecifications","request","programs","additionalFilters","additionalReplaceOnlyFilters","additionalQuery","JSON","stringify","doBackendProxyRequest","datasourceRequest","toPairs","encodeURIComponent","p","mapBackendProxyResponse","table","items","tables","row","rows","length","variable","defaultFormatFn","multi","includeAll","escapeLiteral","quoteLiteral","escapedValues","String"],"mappings":"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","file":"datasource.js","sourcesContent":["// Copyright (C) 2019-2020 Splunk, Inc. All rights reserved.\nimport _ from \"lodash\";\nimport signalfx from './signalfx';\nimport {StreamHandler} from './stream_handler';\nimport {ProxyHandler} from './proxy_handler';\n\nexport class SignalFxDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.datasourceId = instanceSettings.id;\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.authToken = instanceSettings.jsonData.accessToken;\n    this.headers = {'Content-Type': 'application/json'};\n    if (this.url.startsWith(\"/\")) {\n      this.proxyAccess = true;\n    } else {\n      this.headers['X-SF-TOKEN'] = this.authToken;\n      this.endpoint = instanceSettings.url.replace(/^(http)(s)?:/, function(match, p1, p2) {\n        return 'ws' + (p2 || '') + ':';\n      });\n      console.log('Using SignalFx at ' + this.endpoint);\n      this.signalflow = window.signalfx.streamer.SignalFlow(this.authToken, {\n        signalflowEndpoint: this.endpoint,\n      });\n    }\n    this.streams = [];\n    // give interpolateQueryStr access to this\n    this.interpolateQueryStr = this.interpolateQueryStr.bind(this);\n  }\n\n  query(options) {\n    const queries = _.filter(options.targets, t => {return t.hide !== true;})\n    .map(t => this.templateSrv.replace(t.program, options.scopedVars, this.interpolateQueryStr));\n    const program = queries.join('\\n');\n\n    const aliases = this.collectAliases(options);\n    const maxDelay = this.getMaxDelay(options);\n\n    // TODO: Better validation can be implemented here \n    if (!program) {\n      return Promise.resolve({data: []});\n    }\n    return this.getSignalflowHandler(options).start(program, aliases, maxDelay, options);\n  }\n\n  collectAliases(options) {\n    return _.fromPairs(_.filter(options.targets, t => {return t.hide !== true && t.program && t.alias;})\n      .map(t => {return {program: this.templateSrv.replace(t.program, options.scopedVars || {}, this.interpolateQueryStr), alias: t.alias};})\n      .flatMap(t => this.extractLabelsWithAlias(t.program, t.alias)));\n  }\n\n  extractLabelsWithAlias(program, alias) {\n    const re = /label\\s?=\\s?'([\\w]*?)'/igm;\n    const labels = [];\n    let m;\n    do {\n        m = re.exec(program);\n        if (m) {\n          labels.push([m[1], alias]);\n        }\n    } while (m);\n    return labels;\n  }\n\n  getMaxDelay(options) {\n    let maxDelay = _.max(_.map(options.targets, t => t.maxDelay));\n    if (!maxDelay)\n      maxDelay = 0;\n    return maxDelay;\n  }\n\n  getSignalflowHandler(options) {\n    if (this.proxyAccess) {\n      return new ProxyHandler(this.datasourceId, this.backendSrv, this.templateSrv);\n    }\n    let handler = this.streams[options.panelId];\n    if (!handler) {\n      handler = new StreamHandler(this.signalflow, this.templateSrv);\n      this.streams[options.panelId] = handler;\n    }\n    return handler;\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: '/v2/metric',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  metricFindQuery(query) {\n    const metricNameQuery = query.match(/^metrics\\(([^\\)]*?)\\)/);\n    if (metricNameQuery) {\n      return this.getMetrics(this.templateSrv.replace(metricNameQuery[1]));\n    }\n    const propertyKeysQuery = query.match(/^property_keys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n    if (propertyKeysQuery) {\n      return this.getPropertyKeys(this.templateSrv.replace(propertyKeysQuery[1]), this.templateSrv.replace(propertyKeysQuery[3]));\n    }\n    const propertyValuesQuery = query.match(/^property_values\\(([^,]+?),\\s?([^,]+?)(,\\s?(.+))?\\)/);\n    if (propertyValuesQuery) {\n      return this.getPropertyValues(this.templateSrv.replace(propertyValuesQuery[1]), this.templateSrv.replace(propertyValuesQuery[2]), this.templateSrv.replace(propertyValuesQuery[4]));\n    }\n    const tagsQuery = query.match(/^tags\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n    if (tagsQuery) {\n      return this.getTags(this.templateSrv.replace(tagsQuery[1]), this.templateSrv.replace(tagsQuery[3]));\n    }\n    // var globalTagsQuery = query.match(/^tags\\(([^\\)]*?)\\)/);\n    // if (globalTagsQuery) {\n    //   return this.getGlobalTags(this.templateSrv.replace(globalTagsQuery[1]));\n    // }\n    this.q.when([]);\n  }\n\n  getMetrics(query) {\n    let mapFunc = this.proxyAccess ? this.mapPropertiesToTextValue : this.mapMetricsToTextValue;\n    return this.doQueryRequest('/v2/metric', 'name:' + (query ? query : '*'))\n      .then(mapFunc);\n  }\n\n  mapMetricsToTextValue(result) {\n    return _.map(result.data.results, d => {\n      return { text: d.name, value: d.name };\n    });\n  }\n\n  getPropertyKeys(metric, partialInput) {\n    return this.doSuggestQueryRequest(metric, null, partialInput);\n  }\n\n  getPropertyValues(metric, propertyKey, partialInput) {\n    return this.doSuggestQueryRequest(metric, propertyKey, partialInput);\n  }\n\n  getTags(metric, partialInput) {\n    return this.doSuggestQueryRequest(metric, 'sf_tags', partialInput);\n  }\n\n  mapPropertiesToTextValue(result) {\n    return _.map(result.data, d => {\n      return { text: d, value: d };\n    });\n  }\n\n  // getGlobalTags(query) {\n  //   return this.doQueryRequest('/v2/tag', query)\n  //     .then(this.mapMetricsToTextValue);\n  // }\n\n  doQueryRequest(path, query) {\n    return this.doRequest({\n      url: path,\n      params: {query: this.escapeQuery(query), limit: 100},\n      method: 'GET',\n    });\n  }\n\n  doSuggestQueryRequest(metric, property, partialInput) {\n    const program = {\n      programText: 'data(\\'' + metric +'\\').publish(label=\\'A\\')',\n      packageSpecifications: ''\n    };\n    const request = {\n      programs: [program],\n      property,\n      partialInput: partialInput != null ? partialInput : '',\n      limit: 100,\n      additionalFilters: [],\n      additionalReplaceOnlyFilters:[],\n      additionalQuery: null\n    };\n    return this.doRequest({\n      url: '/v2/suggest/_signalflowsuggest',\n      data: JSON.stringify(request),\n      method: 'POST'\n    })\n    .then(this.mapPropertiesToTextValue);\n  }\n\n  escapeQuery(query) {\n    return query.replace(/[\\/]/g, '\\\\$&');\n  }\n\n  doRequest(options) {\n    if (this.proxyAccess) {\n      return this.doBackendProxyRequest(options);\n    }\n    options.headers = this.headers;\n    options.url = this.url + options.url;\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  doBackendProxyRequest(options) {\n    options.data = {\n      queries: [{\n        datasourceId: this.datasourceId,\n        path: options.url,\n        query: _.toPairs(options.params).map(p => encodeURIComponent(p[0]) + '=' + encodeURIComponent(p[1])).join('&'),\n        data: options.data\n      }]\n    };\n    options.url = '/api/tsdb/query';\n    options.method =  'POST';\n    return this.backendSrv.datasourceRequest(options).then(this.mapBackendProxyResponse);\n  }\n\n  mapBackendProxyResponse(response) {\n    const table = response.data.results.items.tables[0];\n    const results = []\n    for (let row = 0; row < table.rows.length; row++) {\n      results.push(table.rows[row][0]);\n    }\n    response.data = results;\n    return response;\n  }\n\n  interpolateQueryStr(value, variable, defaultFormatFn) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return this.escapeLiteral(value);\n    }\n\n    if (typeof value === 'string') {\n      return this.quoteLiteral(value);\n    }\n\n    const escapedValues = _.map(value, this.quoteLiteral);\n    return escapedValues.join(',');\n  }\n\n  quoteLiteral(value) {\n    return \"'\" + String(value).replace(/'/g, \"''\") + \"'\";\n  }\n\n  escapeLiteral(value) {\n    return String(value).replace(/'/g, \"''\");\n  }\n\n}\n"]}