{"version":3,"sources":["../src/proxy_handler.js"],"names":["_","TagProcessor","ProxyHandler","datasourceId","backendSrv","templateSrv","tagProcessor","program","aliases","maxDelay","options","refId","datasourceRequest","url","method","data","from","range","valueOf","toString","to","queries","intervalMs","maxDataPoints","then","response","status","seriesList","r","results","forEach","series","nameId","timeSeriesNameAndId","s","name","unmarshallTags","tags","push","target","datapoints","points","id","sort","a","b","localeCompare","message","marshalledTags","k","value","JSON","parse"],"mappings":";;;;;;;;;;;;;;;AACOA,a;;AACEC,wB,kBAAAA,Y;;;;;;;;;;;;;;;;;;;;;oCAEIC,Y;AAET,sCAAYC,YAAZ,EAA0BC,UAA1B,EAAsCC,WAAtC,EAAmD;AAAA;;AAC/C,yBAAKF,YAAL,GAAoBA,YAApB;AACA,yBAAKC,UAAL,GAAkBA,UAAlB;AACA,yBAAKC,WAAL,GAAmBA,WAAnB;AACA,yBAAKC,YAAL,GAAoB,IAAIL,YAAJ,CAAiBI,WAAjB,CAApB;AACH;;;;0CAEKE,O,EAASC,O,EAASC,Q,EAAUC,O,EAAS;AAAA;;AACvC,6BAAKF,OAAL,GAAeA,OAAf;AACA,4BAAMG,QAAQ,OAAd;AACA,+BAAO,KAAKP,UAAL,CACFQ,iBADE,CACgB;AACfC,iCAAK,iBADU;AAEfC,oCAAQ,MAFO;AAGfC,kCAAM;AACFC,sCAAMN,QAAQO,KAAR,CAAcD,IAAd,CAAmBE,OAAnB,GAA6BC,QAA7B,EADJ;AAEFC,oCAAIV,QAAQO,KAAR,CAAcG,EAAd,CAAiBF,OAAjB,GAA2BC,QAA3B,EAFF;AAGFE,yCAAS,CACL;AACIV,gDADJ;AAEIW,gDAAYZ,QAAQY,UAFxB;AAGIb,sDAHJ;AAIIc,mDAAeb,QAAQa,aAJ3B;AAKIpB,kDAAc,KAAKA,YALvB;AAMII;AANJ,iCADK;AAHP;AAHS,yBADhB,EAiBAiB,IAjBA,CAiBK,oBAAY;AAChB,gCAAIC,SAASC,MAAT,IAAmB,GAAnB,IAA0BD,SAASC,MAAT,GAAkB,GAAhD,EAAqD;AACjD,oCAAMC,aAAa,EAAnB;AACA,oCAAMC,IAAIH,SAASV,IAAT,CAAcc,OAAd,CAAsBlB,KAAtB,CAAV;AACAX,kCAAE8B,OAAF,CAAUF,EAAEG,MAAZ,EAAoB,aAAK;AACrB,wCAAMC,SAAS,MAAK1B,YAAL,CAAkB2B,mBAAlB,CAAsCC,EAAEC,IAAxC,EAA8C,MAAKC,cAAL,CAAoBF,EAAEG,IAAtB,CAA9C,EAA2E,MAAK7B,OAAhF,CAAf;AACAmB,+CAAWW,IAAX,CAAgB,EAAEC,QAAQP,OAAOG,IAAjB,EAAuBK,YAAYN,EAAEO,MAArC,EAA6CC,IAAIV,OAAOU,EAAxD,EAAhB;AACH,iCAHD;AAIAf,2CAAWgB,IAAX,CAAgB,UAACC,CAAD,EAAIC,CAAJ;AAAA,2CAAUD,EAAEF,EAAF,CAAKI,aAAL,CAAmBD,EAAEH,EAArB,CAAV;AAAA,iCAAhB;AACA,oCAAM3B,OAAO;AACTA,0CAAMY;AADG,iCAAb;AAGA,uCAAOZ,IAAP;AACH;AACD,kCAAM,EAAEgC,SAAS,WAAWtB,SAASC,MAA/B,EAAN;AACH,yBAhCE,CAAP;AAiCH;;;mDAEcsB,c,EAAgB;AAC3B,4BAAMX,OAAO,EAAb;AACA,6BAAK,IAAIY,CAAT,IAAcD,cAAd,EAA8B;AAC1B,gCAAME,QAAQF,eAAeC,CAAf,CAAd;AACA,gCAAIC,KAAJ,EAAW;AACPb,qCAAKY,CAAL,IAAUE,KAAKC,KAAL,CAAWF,KAAX,CAAV;AACH;AACJ;AACD,+BAAOb,IAAP;AACH","file":"proxy_handler.js","sourcesContent":["// Copyright (C) 2020 Splunk, Inc. All rights reserved.\nimport _ from \"lodash\";\nimport { TagProcessor } from './tag_processor';\n\nexport class ProxyHandler {\n\n    constructor(datasourceId, backendSrv, templateSrv) {\n        this.datasourceId = datasourceId;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.tagProcessor = new TagProcessor(templateSrv);\n    }\n\n    start(program, aliases, maxDelay, options) {\n        this.aliases = aliases;\n        const refId = 'refId';\n        return this.backendSrv\n            .datasourceRequest({\n                url: '/api/tsdb/query',\n                method: 'POST',\n                data: {\n                    from: options.range.from.valueOf().toString(),\n                    to: options.range.to.valueOf().toString(),\n                    queries: [\n                        {\n                            refId,\n                            intervalMs: options.intervalMs,\n                            maxDelay,\n                            maxDataPoints: options.maxDataPoints,\n                            datasourceId: this.datasourceId,\n                            program,\n                        }]\n                },\n            }).then(response => {\n                if (response.status >= 200 && response.status < 300) {\n                    const seriesList = [];\n                    const r = response.data.results[refId];\n                    _.forEach(r.series, s => {\n                        const nameId = this.tagProcessor.timeSeriesNameAndId(s.name, this.unmarshallTags(s.tags), this.aliases);\n                        seriesList.push({ target: nameId.name, datapoints: s.points, id: nameId.id });\n                    });\n                    seriesList.sort((a, b) => a.id.localeCompare(b.id));\n                    const data = {\n                        data: seriesList,\n                    };\n                    return data;\n                }\n                throw { message: 'Error ' + response.status };\n            });\n    }\n\n    unmarshallTags(marshalledTags) {\n        const tags = {};\n        for (let k in marshalledTags) {\n            const value = marshalledTags[k];\n            if (value) {\n                tags[k] = JSON.parse(value);\n            }\n        }\n        return tags;\n    }\n\n}"]}